# pip install pyTelegramBotAPI
import telebot
from telebot import types, telebot, custom_filters
from telebot.handler_backends import State, StatesGroup
from telebot.storage import StateMemoryStorage

import random

# –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –º–æ–¥—É–ª—å –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –±–∞–∑–µ
import bd


class Command:
    ADD_WORD = "–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï"
    DELETE_WORD = "–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æüîô"
    NEXT = "–î–∞–ª—å—à–µ ‚è≠"
    CANCEL = "‚ùå –û—Ç–º–µ–Ω–∞"
    RESET = "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∞–∑–æ–≤—ã–µ —Å–ª–æ–≤–∞"
    REPEAT = "–ü–æ–≤—Ç–æ—Ä–∏—Ç—å"


class Buttons:
    NEXT = types.KeyboardButton(Command.NEXT)
    ADD = types.KeyboardButton(Command.ADD_WORD)
    DEL = types.KeyboardButton(Command.DELETE_WORD)
    CANCEL = types.KeyboardButton(Command.CANCEL)
    RESET = types.KeyboardButton(Command.RESET)
    REPEAT = types.KeyboardButton(Command.REPEAT)


class MyStates(StatesGroup):
    target_word = State()
    translate_word = State()
    another_words = State()
    new_ru_word = State()
    wait_en_word = State()
    last_words = State()
    no_words = State()
    repeat = State()


def chat_menu(cid):
    c1 = types.BotCommand(command="start", description="–ó–∞–ø—É—Å–∫ / –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–∞—Ç–∞")
    c2 = types.BotCommand(command="help", description="–ü–æ–º–æ—â—å")
    c3 = types.BotCommand(command="cards", description="–†–µ–∂–∏–º –æ–±—É—á–µ–Ω–∏—è")
    bot.set_my_commands([c1, c2, c3])
    bot.set_chat_menu_button(cid, types.MenuButtonCommands("commands"))


TOKEN = "8364704791:AAGhZMvus1eWqJ6UbCi64qgHpqx2ttqTsD4"
bot = telebot.TeleBot(TOKEN, state_storage=StateMemoryStorage())


@bot.message_handler(commands=["help"])
def help_command(message):
    help_text = (
        "üìå *–®–ø–∞—Ä–≥–∞–ª–∫–∞ –ø–æ –±–æ—Ç—É*\n\n"
        "*–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
        "‚Ä¢ /start ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç—å –∏–ª–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
        "‚Ä¢ /cards ‚Äî –Ω–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É —Å–ª–æ–≤\n\n"
        "*–ö–Ω–æ–ø–∫–∏:*\n"
        "‚Ä¢ ‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ (—Ä—É—Å—Å–∫–æ–µ + –ø–µ—Ä–µ–≤–æ–¥)\n"
        "‚Ä¢ üîô –£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ ‚Äî —É–¥–∞–ª–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–ª–æ–≤–æ –∏–∑ —Å–ª–æ–≤–∞—Ä—è\n"
        "‚Ä¢ ‚ôªÔ∏è –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å ‚Äî –≤–µ—Ä–Ω—É—Ç—å –±–∞–∑–æ–≤—ã–π –Ω–∞–±–æ—Ä —Å–ª–æ–≤\n"
        "‚Ä¢ ‚è≠ –î–∞–ª—å—à–µ ‚Äî –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Å–ª–æ–≤–æ\n"
        "‚Ä¢ üîÅ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å ‚Äî –Ω–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –∑–∞–Ω–æ–≤–æ\n\n"
        "*–ö–∞–∫ –ø—Ä–æ—Ö–æ–¥–∏—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞:*\n"
        "1. –ë–æ—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä—É—Å—Å–∫–æ–µ —Å–ª–æ–≤–æ üá∑üá∫\n"
        "2. –¢—ã –≤—ã–±–∏—Ä–∞–µ—à—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ üá¨üáß –∏–∑ –∫–Ω–æ–ø–æ–∫\n"
        "3. –ë–æ—Ç —Å—á–∏—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ ‚úÖ, –æ—à–∏–±–∫–∏ ‚ùå –∏ –ø—Ä–æ–ø—É—Å–∫–∏ ‚è≠\n\n"
        "üí° –°–æ–≤–µ—Ç: –ø—Ä–æ—Ö–æ–¥–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å, —á—Ç–æ–±—ã —Å–ª–æ–≤–∞ –∑–∞–∫—Ä–µ–ø–∏–ª–∏—Å—å!"
    )
    bot.send_message(message.chat.id, help_text, parse_mode="Markdown")


def count(message, cnt):
    bot.send_message(
        message.from_user.id,
        f"–í –≤–∞—à–µ–º —Å–ª–æ–≤–∞—Ä–µ —Å–µ–π—á–∞—Å {cnt[3]} —Å–ª–æ–≤.\n–ò–∑ –Ω–∏—Ö "
        f"{cnt[1]- cnt[2]} –±–∞–∑–æ–≤—ã—Ö.\n(–ë–∞–∑–æ–≤—ã—Ö —É–¥–∞–ª–µ–Ω–æ: {cnt[2]})",
    )
    if cnt[3] <= 0:
        markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
        buttons = []
        buttons.extend([Buttons.RESET, Buttons.ADD])
        markup.add(*buttons)
        bot.send_message(
            message.from_user.id,
            f"–ù—É–∂–Ω–æ —á—Ç–æ-–Ω–∏–±—É–¥—å –¥–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∞–∑–æ–≤—ã–π –Ω–∞–±–æ—Ä —Å–ª–æ–≤, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –Ω–∞—á–∞—Ç—å.",
            reply_markup=markup,
        )
        bot.set_state(message.from_user.id, MyStates.no_words, message.chat.id)


# –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —É—Ä–æ–∫–∞
@bot.message_handler(state=MyStates.repeat)
def no_words(message):
    with bot.retrieve_data(
        user_id=message.from_user.id, chat_id=message.chat.id
    ) as data:
        data["passed_words"] = set()
        data["skip"] = 0
        data["correct"] = 0
        data["wrong"] = 0
    start_bot(message)


@bot.message_handler(commands=["start"])
def init(message):
    welcome_text = (
        "üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –î–∞–≤–∞–π –ø–æ–∑–∞–Ω–∏–º–∞–µ–º—Å—è –∞–Ω–≥–ª–∏–π—Å–∫–∏–º!\n\n"
        "üìå –ß—Ç–æ —É–º–µ–µ—Ç –±–æ—Ç:\n"
        "‚Ä¢ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —Å–ª–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –∫–∞—Ä—Ç–æ—á–µ–∫\n"
        "‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏ —É–¥–∞–ª–µ–Ω–∏–µ —Å–ª–æ–≤\n"
        "‚Ä¢ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è\n"
        "‚Ä¢ –ü–æ–¥—Å—á—ë—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ\n\n"
        "‚ö° –ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /cards ‚Äî –Ω–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É\n"
        "‚Ä¢ /help ‚Äî –ø–æ–ª–Ω–∞—è —à–ø–∞—Ä–≥–∞–ª–∫–∞\n\n"
        "üí° –°–æ–≤–µ—Ç: –Ω–∞—á–Ω–∏ —Å –∫–æ–º–∞–Ω–¥—ã /cards, –∞ –ø–æ—Ç–æ–º –¥–æ–±–∞–≤–ª—è–π —Å–≤–æ–∏ —Å–ª–æ–≤–∞!"
    )
    bot.send_message(message.chat.id, welcome_text, parse_mode="Markdown")
    bot.set_state(message.from_user.id, MyStates.target_word, message.chat.id)
    cnt = bd.count(message.from_user.id)
    count(message, cnt)
    if cnt[3] > 0:
        with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
            data["passed_words"] = set()
            data["skip"] = 0
            data["correct"] = 0
            data["wrong"] = 0
        start_bot(message)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑–æ–≤—ã—Ö —Å–ª–æ–≤
@bot.message_handler(func=lambda message: message.text == Command.RESET)
def reset(message):
    if not bot.get_state(message.from_user.id):
        start_bot(message)
        return
    bd.reset(message.from_user.id)
    cnt = bd.count(message.from_user.id)
    bot.send_message(
        message.from_user.id,
        f"–ë–∞–∑–æ–≤—ã–π –Ω–∞–±–æ—Ä —Å–ª–æ–≤ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!",
    )
    count(message, cnt)
    start_bot(message)


# —Ä–µ–∞–∫—Ü–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –≤—ã—Ö–æ–¥–∞ –∏–∑ —Ä–µ–∂–∏–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞
@bot.message_handler(func=lambda message: message.text == Command.CANCEL)
def next_cards(message):
    start_bot(message)


@bot.message_handler(func=lambda message: message.text == Command.ADD_WORD)
def add_word(message):
    if not bot.get_state(message.from_user.id):
        start_bot(message)
        return

    markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    cid = message.chat.id
    cnt = bd.count(message.from_user.id)
    count(message, cnt)
    if cnt[2] > 0:
        bot.send_message(
            cid,
            "–í–´ –º–æ–∂–µ—Ç–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É–¥–∞–ª–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ –∏–∑ –±–∞–∑–æ–≤–æ–≥–æ –Ω–∞–±–æ—Ä–∞ —Å–ª–æ–≤, –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ.",
            reply_markup=markup,
        )
    buttons = [Buttons.CANCEL]
    if cnt[2] > 0:
        buttons.append(Buttons.RESET)
    markup.add(*buttons)
    bot.set_state(
        user_id=message.from_user.id,
        chat_id=message.chat.id,
        state=MyStates.new_ru_word,
    )
    bot.send_message(cid, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ä—É—Å—Å–∫–æ–µ —Å–ª–æ–≤–æ", reply_markup=markup)


@bot.message_handler(state=MyStates.new_ru_word)
def got_ru(message):
    if not bot.get_state(message.from_user.id):
        start_bot(message)
        return

    markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    buttons = []

    text: str = message.text

    text = text.lower()
    alphabet = set("–∞–±–≤–≥–¥–µ—ë–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è")
    alph_ext = alphabet.union(" -")
    answer = f'–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏: "{text}"\n\n'

    if (
        alphabet.isdisjoint(text.lower()[0])
        or alphabet.isdisjoint(text.lower()[-1])
        or alph_ext.isdisjoint(text.lower())
        or len(text) > 20
    ):
        answer += """–†—É—Å—Å–∫–æ–µ —Å–ª–æ–≤–æ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ:\n
        —Ä—É—Å—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã, –¥–µ—Ñ–∏—Å, –ø—Ä–æ–±–µ–ª.
        –î–æ–ª–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å —Ä—É—Å—Å–∫–æ–π –±—É–∫–≤—ã.
        –î–æ–ª–∂–Ω–æ –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å—Å—è —Ä—É—Å—Å–∫–æ–π –±—É–∫–≤–æ–π.
        –ù–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥–ª–∏–Ω–µ–µ –¥–≤–∞–¥—Ü–∞—Ç–∏ —Å–∏–º–≤–æ–ª–æ–≤.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–ª–æ–≤–æ."""
    else:
        result, tr = bd.add_word(message.from_user.id, text, None)
        if result == 1:
            answer += (
                "–≠—Ç–æ —Å–ª–æ–≤–æ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–æ–≤–æ–º –Ω–∞–±–æ—Ä–µ —Å–ª–æ–≤ –∏ –¥–æ—Å—Ç—É–ø–Ω–æ –≤ –≤–∞—à–µ–º —Å–ª–æ–≤–∞—Ä–µ, "
                "–æ–Ω–æ –∑–∞–≥–∞–¥—ã–≤–∞–µ—Ç—Å—è –≤–∞–º –≤–æ –≤—Ä–µ–º—è —Ç—Ä–µ–Ω–µ—Ä–æ–≤–æ–∫.\n–ï–≥–æ –Ω–µ–ª—å–∑—è –¥–æ–±–∞–≤—Ç—å —Å–Ω–æ–≤–∞."
            )
            bot.send_message(message.chat.id, answer)
            start_bot(message)
            return
        if result == 2:
            answer += (
                "–≠—Ç–æ —Å–ª–æ–≤–æ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–æ–≤–æ–º –Ω–∞–±–æ—Ä–µ —Å–ª–æ–≤ –∏ –±—ã–ª–æ"
                " —É–¥–∞–ª–µ–Ω–æ –≤–∞–º–∏.\n"
                "–°–µ–π—á–∞—Å –æ–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏ –¥–æ—Å—Ç—É–ø–Ω–æ –≤ –≤–∞—à–µ–º —Å–ª–æ–≤–∞—Ä–µ, –∏ –±—É–¥–µ—Ç –∑–∞–≥–∞–¥—ã–≤–∞–µ—Ç—Å—è –≤–∞–º "
                "–≤–æ –≤—Ä–µ–º—è —Ç—Ä–µ–Ω–µ—Ä–æ–≤–æ–∫."
            )
            bot.send_message(message.chat.id, answer)
            start_bot(message)
            return
        if result == 3:
            bot.send_message(
                message.chat.id,
                answer + "–ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ.",
            )
            start_bot(message)
            return
        if result == 4:
            answer += (
                "–≠—Ç–æ —Å–ª–æ–≤–æ —É–∂–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –≤ –≤–∞—à–µ–º —Å–ª–æ–≤–∞—Ä–µ —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º:"
                f" '{tr}'\n\n"
                "–ï—Å–ª–∏ –≤—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ, –ø–µ—Ä–µ–≤–æ–¥ –±—É–¥–µ—Ç –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ –Ω–æ–≤—ã–π.\n\n"
            )
        # –í—Ä–µ–º–µ–Ω–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ª–æ–≤–æ
        with bot.retrieve_data(
            user_id=message.from_user.id, chat_id=message.chat.id
        ) as data:
            data["new_word"] = text
        answer += "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π:"
        # buttons.append(types.KeyboardButton(message.text))
        # handler = got_en
        bot.set_state(
            user_id=message.from_user.id,
            chat_id=message.chat.id,
            state=MyStates.wait_en_word,
        )

    buttons.append(types.KeyboardButton(Command.CANCEL))
    markup.add(*buttons)

    msg = bot.send_message(message.chat.id, answer, reply_markup=markup)


@bot.message_handler(state=MyStates.wait_en_word)
def got_en(message):
    if not bot.get_state(message.from_user.id):
        start_bot(message)
        return

    text: str = message.text

    text = text.lower()
    alphabet = set("abcdefghijklmnopqrstuvwxyz")
    alph_ext = alphabet.union(" -")

    # –í—Ä–µ–º–µ–Ω–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ª–æ–≤–æ
    with bot.retrieve_data(
        user_id=message.from_user.id, chat_id=message.chat.id
    ) as data:
        ru = data["new_word"]

    answer = f'–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Ä—É—Å—Å–∫–æ–µ —Å–ª–æ–≤–æ: "{ru}"\n'
    answer += f'–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ: "{text}"\n\n'
    if (
        alphabet.isdisjoint(text.lower()[0])
        or alphabet.isdisjoint(text.lower()[-1])
        or alph_ext.isdisjoint(text.lower())
        or len(text) > 20
    ):
        answer += """–ê–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ:\n
        –ª–∞—Ç–∏–Ω—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã, –¥–µ—Ñ–∏—Å, –ø—Ä–æ–±–µ–ª.
        –î–æ–ª–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å –ª–∞—Ç–∏–Ω—Å–∫–æ–π –±—É–∫–≤—ã.
        –î–æ–ª–∂–Ω–æ –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å—Å—è –ª–∞—Ç–∏–Ω—Å–∫–æ–π –±—É–∫–≤–æ–π.
        –ù–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥–ª–∏–Ω–µ–µ –¥–≤–∞–¥—Ü–∞—Ç–∏ —Å–∏–º–≤–æ–ª–æ–≤.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–ª–æ–≤–æ."""
    else:
        result = bd.add_word(message.from_user.id, ru, text)[0]
        if result == 0:
            answer += "–°–ª–æ–≤–æ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!"
    bot.send_message(message.chat.id, answer)
    count(message, bd.count(message.from_user.id))
    start_bot(message)


def repeat(message):
    markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    buttons = [Buttons.REPEAT]
    markup.add(*buttons)

    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        bot.send_message(
            message.chat.id,
            "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è\n\n"
            + "–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç:\n"
            + f"    –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {data["correct"]}\n"
            + f"    –ü—Ä–æ–ø—É—à–µ–Ω–æ: {data['skip']}\n"
            + f"    –û—à–∏–±–æ–∫: {data["wrong"]}\n",
            reply_markup=markup,
        )
    bot.set_state(message.from_user.id, MyStates.repeat, message.chat.id)


@bot.message_handler(commands=["cards"])
def start_bot(message):
    chat_menu(message.chat.id)
    if not bot.get_state(message.from_user.id):
        init(message)
        return

    cnt = bd.count(message.from_user.id)
    if cnt[3] <= 0:
        count(message, cnt)
        return

    markup = types.ReplyKeyboardMarkup(row_width=2)
    words, others = bd.get_words(message.from_user.id)

    # ru_word = "–ú–∏—Ä"  # –±—Ä–∞—Ç—å –∏–∑ –ë–î
    # en_word = "Peace"  # –±—Ä–∞—Ç—å –∏–∑ –ë–î
    # others = ["Green", "White", "Hello"]  # –±—Ä–∞—Ç—å –∏–∑ –ë–î

    i = 0
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        while True:
            i = random.randint(0, len(words) - 1)
            if words[i][0] in data["passed_words"]:
                words.pop(i)
                continue
            break
        word = words[i]
        ru_word = word[0]
        en_word = word[1]
        others.remove(en_word)
        others = list(others)
        random.shuffle(others)
        others = others[0:3]
    buttons = []

    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        if len(data["passed_words"]) >= cnt[3]:
            repeat(message)
            return
        bot.send_message(
            message.chat.id,
            f"–ü—Ä–æ–≥—Ä–µ—Å—Å: [{len(data['passed_words'])}/{cnt[3]}]",
        )

    target_word_btn = types.KeyboardButton(en_word)
    buttons.append(target_word_btn)

    other_words_btns = [types.KeyboardButton(word) for word in others]
    buttons.extend(other_words_btns)
    random.shuffle(buttons)

    greeting = f"–í—ã–±–µ—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞:\nüá∑üá∫ {ru_word}"

    buttons.extend([Buttons.NEXT, Buttons.ADD, Buttons.DEL])

    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        data["buttons"] = buttons

    markup.add(*buttons)

    bot.send_message(
        message.chat.id,
        greeting,
        reply_markup=markup,
    )

    bot.set_state(message.from_user.id, MyStates.target_word, message.chat.id)

    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        data["target_word"] = en_word
        data["translate_word"] = ru_word
        data["other_words"] = others


# –ø—Ä–æ–ø—É—Å–∫ —Å–ª–æ–≤–∞
@bot.message_handler(func=lambda message: message.text == Command.NEXT)
def next_cards(message):
    if not bot.get_state(message.from_user.id):
        start_bot(message)
        return
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        data["passed_words"].add(data["translate_word"])
        data["skip"] += 1

    start_bot(message)


@bot.message_handler(func=lambda message: message.text == Command.DELETE_WORD)
def delete_word(message):
    if not bot.get_state(message.from_user.id):
        start_bot(message)
        return
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        word = data["translate_word"]
    bd.del_word(message.from_user.id, word)
    bot.send_message(message.chat.id, '–£–¥–∞–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ"')
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        data["passed_words"].remove(data["translate_word"])
    cnt = bd.count(message.from_user.id)
    count(message, cnt)
    if cnt[3] == 0:
        return
    start_bot(message)


# –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–∏—Ç—É–∞—Ü–∏–∏
@bot.message_handler(func=lambda message: True, content_types=["text"])
def message_reply(message):
    if not bot.get_state(message.from_user.id):
        start_bot(message)
        return

    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        data: dict
        if "target_word" in data.keys():
            target_word = data["target_word"]
        else:
            start_bot(message)
            return

    if message.text == target_word:
        answer = "–û—Ç–ª–∏—á–Ω–æ!‚ù§\n\n"
        answer += f"{data['target_word']} -> {data['translate_word']}"
        with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
            data["passed_words"].add(data["translate_word"])
            data["correct"] += 1

        bot.send_message(message.chat.id, answer)
        start_bot(message)
    else:
        markup = types.ReplyKeyboardMarkup(row_width=2)
        buttons = []
        with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
            data["wrong"] += 1
            buttons = data["buttons"]

        for btn in buttons:
            if btn.text == message.text:
                btn.text = message.text + "‚ùå"
                break

        markup.add(*buttons)
        text = (
            "–î–æ–ø—É—â–µ–Ω–∞ –æ—à–∏–±–∫–∞!\n"
            f"–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –≤—Å–ø–æ–º–Ω–∏—Ç—å —Å–ª–æ–≤–æ üá∑üá∫{data['translate_word']}"
        )

        bot.send_message(message.chat.id, text, reply_markup=markup)


if __name__ == "__main__":
    bot.add_custom_filter(custom_filters.StateFilter(bot))
    print("Bot is running!")
    bot.infinity_polling(skip_pending=True)
